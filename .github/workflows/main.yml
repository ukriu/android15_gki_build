name: Build kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true
      release_type:
        description: 'Make it a prerelease?'
        required: true
        type: boolean
        default: true
      include_susfs:
        description: 'Include SUSFS?'
        requiree: true
        type: boolean
      runner:
        description: "Choose runner"
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-22.04-local
        default: ubuntu-22.04
      lto_type:
        description: "Choose LTO type (full will not run on basic runners)"
        required: true
        type: choice
        options:
          - full
          - thin
          - none
        default: thin
      kernelsu_branch:
        description: "Choose ksu branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Stable
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string  # This input is required if 'Other' is chosen
        default: ""  # Default is empty, but can be filled in if 'Other' is selected

jobs:
  build-ksu-gki:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      android_version: "android15"
      kernel_version: "6.6"
      sub_level: "X"
      os_patch_level: "lts"
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "KSU"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      include_susfs: ${{ inputs.include_susfs }}

  build-mksu-gki:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      android_version: "android15"
      kernel_version: "6.6"
      sub_level: "X"
      os_patch_level: "lts"
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "MKSU"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      include_susfs: ${{ inputs.include_susfs }}

  build-ksu-next-gki:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      android_version: "android15"
      kernel_version: "6.6"
      sub_level: "X"
      os_patch_level: "lts"
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "KSU_NEXT"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      include_susfs: ${{ inputs.include_susfs }}

  build-all-ksu-gki:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      android_version: "android15"
      kernel_version: "6.6"
      sub_level: "X"
      os_patch_level: "lts"
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "ALL"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      include_susfs: ${{ inputs.include_susfs }}

  build-6-30-ksu-gki:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      android_version: "android15"
      kernel_version: "6.6"
      sub_level: 30
      os_patch_level: "2024-08"
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "KSU"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      include_susfs: ${{ inputs.include_susfs }}

  build-6-30-mksu-gki:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      android_version: "android15"
      kernel_version: "6.6"
      sub_level: 30
      os_patch_level: "2024-08"
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "MKSU"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      include_susfs: ${{ inputs.include_susfs }}

  build-6-30-ksu-next-gki:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      android_version: "android15"
      kernel_version: "6.6"
      sub_level: 30
      os_patch_level: "2024-08"
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "KSU_NEXT"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      include_susfs: ${{ inputs.include_susfs }}

  build-6-30-all-ksu-gki:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}
      android_version: "android15"
      kernel_version: "6.6"
      sub_level: 30
      os_patch_level: "2024-08"
      lto_type: ${{ inputs.lto_type }}
      kernelsu_variant: "ALL"
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      include_susfs: ${{ inputs.include_susfs }}

  release:
    runs-on: ubuntu-latest
    needs:
        - build-ksu-gki
        - build-mksu-gki
        - build-ksu-next-gki
        - build-all-ksu-gki
        - build-6-30-ksu-gki
        - build-6-30-mksu-gki
        - build-6-30-ksu-next-gki
        - build-6-30-all-ksu-gki
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ukriu
      REPO_NAME: android15_gki_build
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "GKI Kernels With KernelSU & SUSFS"
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get commit hashes and generate commit URLs
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"

          declare -A BRANCH_MAP=(
            ["gki_android15_6_6"]="gki-android15-6.6"
          )

          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')

            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"

              # Store commit hash and commit URL in GitHub environment
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: Generate and Create New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            # Fetch the latest tag from GitHub (this is the latest tag based on the GitHub API)
            LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="v1.5.5-r0"
            fi
            
            NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
    
            # Output the new tag to be used
            echo "New tag: $NEW_TAG"
    
            # Set the new tag as an environment variable to be used in later steps
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

            # Create the tag in the repository
            git tag $NEW_TAG
            git push origin $NEW_TAG

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: ${{ inputs.release_type }}
          name: ${{ env.RELEASE_NAME }}
          body: |
            These kernels are prebuilt with Offical KernelSU/MKSU/KernelSU-Next with SUSFS.
            
            **SUSFS Present: ${{ inputs.include_susfs }}**
            
            Features:
            [+] KernelSU/MKSU/KernelSU-Next
            [+] SUSFS à¶ž v1.5.5 
            [+] Wireguard Support
            [+] Simple Maphide for LineageOS Detections
            [+] Futile Maphide for jit-zygote-cache Detections
            [+] Magic Mount Support (for MKSU/KernelSU-Next)
            [+] Check out Wild+ Kernels for the source (in readme)
            
            Actions Runner: ${{ inputs.runner }}
            LTO: ${{ inputs.lto_type }}
            Branch type for KSU: ${{ inputs.kernelsu_branch }}
            blehSU Current Kernel Tag (Not Important): ${{ env.NEW_TAG }}
            
            Module:
            \- https://github.com/sidex15/ksu_module_susfs
            
            Managers:
            \- KernelSU (`KSU`, `ALL`): https://github.com/tiann/KernelSU / https://t.me/KernelSU_group/3234
            \- 5ec1cff's KernelSU (`MKSU`, `ALL`): https://github.com/5ec1cff/KernelSU / https://t.me/mksu_ci
            \- KernelSU-Next (`KSU_NEXT`, `ALL`): https://github.com/rifsxd/KernelSU-Next / https://t.me/ksunext_group/24847
            \- rsuntk's KernelSU (`ALL`): https://github.com/rsuntk/KernelSU / https://t.me/rsukrnlsu
            \- backslashxx's KernelSU (`ALL`): https://github.com/backslashxx/KernelSU
            
            The kernels starting with `ALL` have all of the above managers in one image. They also use KernelSU as the base.  
            I wont recommend you use these as it may cause issues, just use their respective images.  
            There is little point to using the last two managers in this case as they are specifically made for non-gki KernelSU support.  
            
            Commit Hashes:
            \- SUSFS4KSU: gki-android15-6.6: [${{ env.COMMIT_HASH_gki_android15_6_6 }}](${{ env.COMMIT_URL_gki_android15_6_6 }})

      - name: Upload Release Assets
        run: |
          # Loop through all files in the downloaded-artifacts directory
          for file in ./downloaded-artifacts/*_kernel-*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi

              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
